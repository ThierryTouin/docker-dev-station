{
  "name": "HA-test2",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -640,
        -16
      ],
      "id": "a8630396-60a9-4912-ba76-ef2b73768559",
      "name": "When chat message received",
      "webhookId": "7aba6a5c-eab3-47aa-a039-f668ab1b81fc"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "Tu es un parseur d'instructions textuelles pour Home Assistant.\n\nTa mission :\n1. Lire exactement le texte du chat fourni par n8n.\n2. Si le texte contient une intention d'action exécutable par Home Assistant, tu dois générer **uniquement** un objet JSON strict et valide décrivant la commande Home Assistant correspondante.\n3. Si tu **ne peux pas** déduire une commande Home Assistant claire et fiable, tu dois renvoyer uniquement un JSON indiquant cet échec.\n4. Tu n’exécutes rien : tu fournis seulement la description de la commande.\n5. Règle de sécurité : ne propose jamais de commande qui modifie des entités sensibles ou \"protected\". Si tu n’es pas sûr d’une entité, considère que tu **ne peux pas**.\n\n---\n\nFORMAT DE SORTIE OBLIGATOIRE (aucun texte en dehors du JSON)\n\n✔ Si commande identifiable :\n{\n  \"result\": \"ok\",\n  \"command\": {\n    \"domain\": \"<domain>\",            \n    \"service\": \"<service>\",          \n    \"target\": {                      \n      \"entity_id\": [\"entity.id1\", \"entity.id2\"]\n    },\n    \"service_data\": {                \n    },\n    \"human_readable\": \"<description brève et claire de la commande>\"\n  }\n}\n\n✔ Si impossible :\n{\n  \"result\": \"cannot\",\n  \"reason\": \"<raison brève>\"\n}\n\n---\n\nRÈGLES DE DÉDUCTION :\n\n- Cherche des verbes d’action : allume, éteins, ouvre, ferme, règle, augmente, baisse, mets, joue, stoppe, active, désactive.\n- Identifie les entités mentionnées : exemple “lampe du salon” → `light.salon`.\n- Si le nom humain d’une entité n’a pas d’`entity_id` connu, renvoie `cannot`.\n- Pour une valeur numérique (température, luminosité, volume…), extrais la valeur et l’unité.\n- Pour une couleur : `color_name` ou `rgb_color`.\n- Pour les médias : `media_content_id` et `media_content_type`.\n- Pour les scènes/scripts : utilise `domain: \"scene\"` ou `domain: \"script\"` avec `service: \"turn_on\"`.\n\n---\n\nEXEMPLES :\n\nEntrée : \"Allume la lampe du salon\"\nSi entité connue :\n{\n  \"result\": \"ok\",\n  \"command\": {\n    \"domain\": \"light\",\n    \"service\": \"turn_on\",\n    \"target\": {\"entity_id\": [\"light.salon\"]},\n    \"service_data\": {},\n    \"human_readable\": \"Allumer la lampe du salon\"\n  }\n}\n\nSinon :\n{\n  \"result\": \"cannot\",\n  \"reason\": \"entité 'lampe du salon' non mappée vers un entity_id\"\n}\n\nEntrée : \"Régle la température à 21 degrés\"\n{\n  \"result\": \"ok\",\n  \"command\": {\n    \"domain\": \"climate\",\n    \"service\": \"set_temperature\",\n    \"target\": {\"entity_id\": [\"climate.thermostat\"]},\n    \"service_data\": {\"temperature\": 21},\n    \"human_readable\": \"Régler la température à 21°C\"\n  }\n}\n\nEntrée : \"Mets la playlist chill dans le salon\"\n{\n  \"result\": \"ok\",\n  \"command\": {\n    \"domain\": \"media_player\",\n    \"service\": \"play_media\",\n    \"target\": {\"entity_id\": [\"media_player.salon\"]},\n    \"service_data\": {\n      \"media_content_id\": \"spotify:playlist:chill\",\n      \"media_content_type\": \"playlist\"\n    },\n    \"human_readable\": \"Jouer la playlist chill dans le salon\"\n  }\n}\n\n---\n\nGESTION DES AMBIGUÏTÉS :\n\n- Si action ou entité non claire → renvoie `cannot`.\n- Si plusieurs entités possibles → renvoie `cannot`.\n- Si action critique (alarme, serrure, sécurité) sans confirmation explicite → renvoie `cannot` avec raison.\n\n---\n\nCONTRAINTES DE SORTIE :\n\n- Réponds **UNIQUEMENT** par un JSON.\n- Aucun texte, commentaire ou explication hors du JSON.\n- Doit être un JSON valide, sans guillemets manquants, ni clé inconnue.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -384,
        -144
      ],
      "id": "26e27995-5da4-4d28-a91c-e5d629365a7f",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.homeAssistantTool",
      "typeVersion": 1,
      "position": [
        -144,
        208
      ],
      "id": "8380db52-bb29-4e1e-9ff1-25f26ad6dbfc",
      "name": "Get the config in Home Assistant"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -288,
        208
      ],
      "id": "89d1a5e8-e287-4727-87e4-d0fc49a1f0b4",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": "llama3.2:3b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -480,
        128
      ],
      "id": "8d756fcd-5846-428a-b2ef-787162f2f02f",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "u7MnAZ5gJ4Ss3ymo",
          "name": "Ollama account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the config in Home Assistant": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b494cf14-8526-4fe0-92ae-c694ab9f7f25",
  "meta": {
    "instanceId": "f14f286ca435d1fa3b9d8041e8f06aa0af7ab28ea8edcd7e11fd485a100b632b"
  },
  "id": "d59DZr4XxSSG5dnI",
  "tags": []
}